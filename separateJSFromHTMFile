#! /bin/bash -
#从.htm文件中提取javascript代码（只有一段内嵌代码时），并保存到.js/目录下同名.js文件中，然后重命名.htm为.html文件，并清除内嵌javascript代码，增加js文件引用。
LC_ALL=C
path="."
jsFolderName="js"
sourceHTMLFileType=".htm"
destinationHTMLFileType=".htm"
jsBlockStartMarkStr='<script type="text/javascript">'
jsBlockStartMarkGrepReg='<script type=\"text\/javascript\">'
jsBlockStartMarkSedReg='<script\ type=\"text\/javascript\">'
### startRegion Option
#while getopts "p:t:r:f:" optname
#do
#    case "$optname" in
#        "p")
#            path=$OPTARG
#        ;;
#        "s")
#            sourceHTMLFileType=$OPTARG
#        ;;
#		"d")
#			destinationHTMLFileType=$OPTARG
#		;;
#        "f")
#            targetFileName=$OPTARG
#        ;;
#        "?")
#            echo "unknown option $OPTARG"
#        ;;
#        ":")
#            echo "No argument value for option $OPTARG"
#        ;;
#        *)
#        ## should not occur
#            echo "unknown error while processing options"
#        ;;
#    esac
#done
### endRegion Option

## STARTRegion LongOption
# from /usr/share/doc/util-linux/examples/getopt-parse.bash
# Note that we use `"$@"' to let each command-line parameter expand to a 
# separate word. The quotes around `$@' are essential!
# We need TEMP as the `eval set --' would nuke the return value of getopt.
TEMP=`getopt -o p:s:d:j:m: --long path:,sourceHTMLFileType:,destinationHTMLFileType:,jsFolderName:,jsBlockStartMarkStr: \
     -n 'example.bash' -- "$@"`

if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"

while true ; do
	case "$1" in
		-p|--path) path=$2 ; shift 2 ;;
		-s|--sourceHTMLFileType) sourceHTMLFileType=$2 ; shift 2 ;;
			## c has an optional argument. As we are in quoted mode,
			## an empty parameter will be generated if its optional
			## argument is not found.
			#case "$2" in
			#	"") echo "Option sourceHTMLFileType, no argument"; shift 2 ;;
			#	*)  echo "Option sourceHTMLFileType, argument \`$2'"; sourceHTMLFileType=$2 ; shift 2 ;;
			#esac ;;
		-d|--destinationHTMLFileType) destinationHTMLFileType=$2 ; shift 2 ;;
		-j|--jsFolderName) jsFolderName=$2 ; shift 2 ;;
		-m|--jsBlockStartMarkStr) jsBlockStartMarkStr=$2 ; shift 2 ;;
		--) shift ; break ;;
		*) echo "Internal error!" ; exit 1 ;;
	esac
done
if [ 0 -ne ${#1} ];
then
	echo "Remaining arguments:";
	for arg do echo '--> '"\`$arg'" ; done
fi
## ENDRegion LongOption
### BEGIN TIPS
### /etc/bash_completion.d/
##function _separateJSFromHTMLFile() {
##    local cur prev opts
##
##    COMPREPLY=()
##
##    cur="${COMP_WORDS[COMP_CWORD]}"
##    prev="${COMP_WORDS[COMP_CWORD-1]}"
##    opts="-h --help -f --file -o --output"
##
##    if [[ ${cur} == -* ]] ; then
##        COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
##        return 0
##    fi
##}
##complete -F _separateJSFromHTMLFile separateJSFromHTMLFile
### END TIPS
# BEGIN Tool Functions
strToGrepReg(){
	local s=$1
	#s=${s//\ /\\\ }
	s=${s//\//\\\/}
	s=${s//\"/\\\"}
	echo ${s}
}
strToSedReg(){
	local s=$1
	#s=${s//\ /\\\ }
	s=${s//\//\\\/}
	s=${s//\"/\\\"}
	echo ${s}
}

# END Tool Functions

# pre-format parameters
path=${path%\/}"/"
jsFolderName=${jsFolderName%%\/*}
echo "path: "$path
echo "js folder name: "$jsFolderName
jsBlockStartMarkGrepReg=$(strToGrepReg "${jsBlockStartMarkStr}")
jsBlockStartMarkSedReg=$(strToSedReg "${jsBlockStartMarkStr}")
echo "jsBlockStartMarkGrepReg "$jsBlockStartMarkGrepReg
echo "jsBlockStartMarkSedReg "$jsBlockStartMarkSedReg
successNum=0
failureNum=0
for fileName in $(grep "${jsBlockStartMarkGrepReg}" -rl --exclude=*.git* --exclude=*.svn* --exclude=*.swp --include=*${sourceHTMLFileType} ${path})
do
	echo ">>--------------------------"
	#pre-deal $fileName
	fileName=${fileName#${path}}
	echo "Found ${sourceHTMLFileType} file: ${fileName}"
	if [ -w ${path}${fileName} ]
	then
		dos2unix -q ${path}${fileName}
	else
		echo "You don't have permission to modify this file( ${fileName} )";
		echo "-------------------------<<";
		let "failureNum=${failureNum}+1";
		continue;
	fi
	#create folder for .js file
	if [ -d ${path}${jsFolderName} ]
	then
		echo "Found directory: ${jsFolderName} in path: ${path}";
	else
		mkdir -p ${path}${jsFolderName};
		echo "Made directory: ${jsFolderName} in path: ${path}";
	fi
	jsFileName=${fileName##*/}
	jsFileName=${jsFileName%${sourceHTMLFileType##*.}}"js"
	#copy javascript code from htm file and write to js file.
	jsFileDir=${path}${jsFolderName}"/"${jsFileName}
		#sed -n -e "/<script\ type=\"text\/javascript\">/,/<\/script>/w ${jsFileDir}" ${path}${fileName}
	sed -n -e "/${jsBlockStartMarkSedReg}/,/<\/script>/w ${jsFileDir}" ${path}${fileName}
	dos2unix -q ${jsFileDir}
		#sed -i -e "/<script\ type=\"text\/javascript\">$/d" -e "/<\/script>$/d" ${jsFileDir}
	sed -i -e "/${jsBlockStartMarkSedReg}$/d" -e "/<\/script>$/d" ${jsFileDir}
	echo ".js file:"${jsFileDir}" is created."
	#rename htm file
	sourceFileDir=${path}${fileName}
	destFileDir=${path}${fileName%${sourceHTMLFileType##*.}}${destinationHTMLFileType##*.}
	if [ ${destFileDir} != ${sourceFileDir} ]
	then
		mv -i ${sourceFileDir} ${destFileDir}
	fi
	if [ -f ${sourceFileDir} ]
	then
		echo "${sourceFileDir} is not renamed.";
	elif [ -f ${destFileDir} ]
	then
		echo "${sourceFileDir} is renamed as ${destFileDir}";
		fileName=${fileName%${sourceHTMLFileType##*.}}${destinationHTMLFileType##*.};
	else
		echo "${sourceFileDir} lost!";
	fi
	#rm javascript code from html file
	regStr='\t<script type="text/javascript" src="'${jsFolderName}'/'${jsFileName}'"></script>\n</head>'
	regStr=$(strToGrepReg "${regStr}")
		#sed -i -e "/<script\ type=\"text\/javascript\">/,/<\/script>/g" -e "/^$/d" -e "s/<\/head>/${regStr}/g" ${path}${fileName}
	sed -i -e "/${jsBlockStartMarkSedReg}/,/<\/script>/g" -e "/^$/d" -e "s/<\/head>/${regStr}/g" ${path}${fileName}
	echo "Removed js code from ${sourceHTMLFileType} file."
	#sed -i -e "/<script\ type=\"text\/javascript\">/,/<\/script>/g" -e "/^$/d" ${fileName}
	#sed -i -e "s/<\/head>/${regStr}/g" ${fileName}
	echo "-------------------------<<"
	((successNum=successNum+1))
done
echo "Done. Succeeded:${successNum}; Failed:${failureNum}."
